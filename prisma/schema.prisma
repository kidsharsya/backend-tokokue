// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id String @id @default(uuid())
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model User {
  id String @id @default(uuid())
  roleId String
  name String 
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])
  customer Customer?
}

model Customer {
  id String @id @default(uuid())
  userId String @unique
  phoneNumber String
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  orders Order[]
}

model Category {
  id String @id @default(uuid())
  name String
  slug String @unique
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id String @id @default(uuid())
  categoryId String
  name String
  slug String @unique
  description String
  price Decimal @db.Decimal(10,2)
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  images ProductImage[]
  orderItems OrderItem[]
}

model ProductImage {
  id String @id @default(uuid())
  productId String
  imageUrl String
  isThumbnail Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id String @id @default(uuid())
  customerId String
  orderDate DateTime
  totalAmount Decimal @db.Decimal(12,2)
  status String @default("pending") //pending, paid, process, delivered, cancelled
  shippingAddress String
  customerNotes String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  items OrderItem[]
  payments Payment[]
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  productId String
  quantity Int
  pricePerItem Decimal @db.Decimal(10,2)

  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id String @id @default(uuid())
  orderId String
  paymentMethod String
  paymentStatus String @default("pending") // pending, success, failed
  amount Decimal @db.Decimal(12,2)
  transactionId String
  paymentDate DateTime
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}